{"version":3,"sources":["images sync /^/.//.*$","images/fake.jpg","images/real.jpg","images/splash.jpg","images/unsure.jpg","Form.js","App.js","serviceWorker.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","useStyles","makeStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","avatar","margin","backgroundColor","palette","secondary","main","form","width","submit","Form","props","useState","enteredText","setText","enteredURL","setURL","setSubmit","useEffect","verifai","message","imageType","trim","length","fetch","method","then","response","json","responseJson","is_trusted_url","is_trusted_text","changeImage","document","getElementById","innerHTML","classes","Container","component","maxWidth","CssBaseline","className","style","fontSize","Typography","variant","noValidate","TextField","value","onChange","target","required","fullWidth","label","placeholder","name","multiline","autoFocus","rows","Button","color","onClick","preventDefault","type","Grid","container","item","xs","Link","href","App","image","setImage","title","backgroundSize","height","src","require","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.ba6d5c84.chunk.js","sourcesContent":["var map = {\n\t\"./fake.jpg\": 68,\n\t\"./real.jpg\": 69,\n\t\"./splash.jpg\": 70,\n\t\"./unsure.jpg\": 71\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 67;","module.exports = __webpack_public_path__ + \"static/media/fake.c4b4e3a2.jpg\";","module.exports = __webpack_public_path__ + \"static/media/real.69c23f19.jpg\";","module.exports = __webpack_public_path__ + \"static/media/splash.d9802e53.jpg\";","module.exports = __webpack_public_path__ + \"static/media/unsure.6e7b16b7.jpg\";","import React, { useState, useEffect } from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport PolicyOutlinedIcon from '@material-ui/icons/PolicyOutlined';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport './App.css';\n\n\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center'\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nexport default function Form(props) {\n    const [enteredText, setText] = useState('');\n    const [enteredURL, setURL] = useState('');\n    const [submit, setSubmit] = useState(false);\n\n\n    useEffect(() => {\n    }, [submit]);\n\n    const textInputHandler = e => {\n        setText(e.target.value);\n    };\n\n    const urlInputHandler = e => {\n        setURL(e.target.value);\n    };\n\n    const submitHandler = e => {\n        e.preventDefault();\n        verifai();\n        setSubmit(true);\n    }\n\n    const verifai = () => {\n        var message = \"\";\n        var imageType = \"\";\n        if (enteredText.trim().length > 0) {\n            fetch('http://54.82.94.154/verifai?url=' + enteredURL.trim() + '&text=' + enteredText.trim(), {\n                method: 'GET'\n            }).then((response) => response.json())\n                .then((responseJson) => {\n\n                    if (responseJson.is_trusted_url && responseJson.is_trusted_text) {\n                        message = \"We're fairly confident that this article is REAL news. Both the text and source seem to be trustworthy.\"\n                        imageType = \"real\";\n                    } else if (responseJson.is_trusted_url && !responseJson.is_trusted_text) {\n                        message = \"...We're not quite sure about this article. The text seems fishy but the source is trustworthy.\"\n                        imageType = \"unsure\";\n                    } else if (!responseJson.is_trusted_url && responseJson.is_trusted_text) {\n                        message = \"We can't be 100% sure, but this article seems to be REAL news.\"\n                        imageType = \"real\";\n                    } else {\n                        message = \"We can't be 100% sure, but this article seems to be FAKE news.\"\n                        imageType = \"fake\";\n                    }\n\n                    props.changeImage(imageType);\n                    document.getElementById(\"message\").innerHTML = message;\n                });\n        }\n    }\n\n    const classes = useStyles();\n\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n        <CssBaseline />\n        <div className={classes.paper}>\n            <PolicyOutlinedIcon style={{ fontSize: '64px' }} />\n            <Typography component=\"h1\" variant=\"h2\">\n                VerifAI\n            </Typography>\n            <Typography component=\"h1\" variant=\"h6\">\n                Natural Language Fake News Detection\n            </Typography>\n            <form className={classes.form} noValidate>\n                <TextField\n                    value={enteredURL}\n                    onChange={urlInputHandler}\n                    variant=\"outlined\"\n                    margin=\"normal\"\n                    required\n                    fullWidth\n                    label=\"Optional Source URL\"\n                    placeholder={enteredURL}\n                    name=\"url\"\n                />\n                <TextField\n                    value={enteredText}\n                    onChange={textInputHandler}\n                    variant=\"outlined\"\n                    margin=\"normal\"\n                    required\n                    fullWidth\n                    name=\"text\"\n                    label=\"Article Text\"\n                    placeholder={enteredText}\n                    id=\"text\"\n                    multiline\n                    autoFocus\n                    rows={12}\n                />\n                <Button\n                    fullWidth\n                    variant=\"contained\"\n                    color=\"primary\"\n                    className={classes.submit}\n                    onClick={submitHandler}\n                    type=\"submit\"\n                >\n                    Submit\n                </Button>\n\n                <Grid container>\n                    <Grid item xs>\n                        <p id=\"message\">Please enter the article text and full source URL (optional).</p>\n                    </Grid>\n                </Grid>\n                <Grid container>\n                    <Grid item xs>\n                        <Link href=\"#\" variant=\"body2\">\n                            Github Project Repo\n                        </Link>\n                    </Grid>\n                </Grid>\n            </form>\n        </div>\n        \n        \n    </Container>\n  );\n}","import React, { useState, useEffect } from 'react';\nimport Form from './Form.js';\nimport './App.css';\nimport Img from 'react-image';\n\n\n\n\nfunction App() {\n\n  const [image, setImage] = useState('splash.jpg');\n\n  useEffect(() => {\n    document.title = \"VerifAI\";\n  }, []);\n\n  const changeImage = (type) => {\n    setImage(type + '.jpg');\n  };\n\n\n  return (\n    <div className=\"App\">\n      <Img backgroundSize='cover' height={'800'} width={950} src={require('./images/' + image)}/>\n      <Form changeImage={changeImage}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}